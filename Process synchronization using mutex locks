#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define NUM_THREADS 2

pthread_mutex_t mutex;
int shared_variable = 0;

void *thread_function(void *thread_id) {
    long tid;
    tid = (long)thread_id;
    
    pthread_mutex_lock(&mutex);
    printf("Thread %ld is accessing the shared variable\n", tid);
    shared_variable++; // Critical section
    printf("Thread %ld: Shared variable = %d\n", tid, shared_variable);
    pthread_mutex_unlock(&mutex);
    
    pthread_exit(NULL);
}

int main() {
    pthread_t threads[NUM_THREADS];
    int rc;
    long t;
    
    pthread_mutex_init(&mutex, NULL);
    
    for (t = 0; t < NUM_THREADS; t++) {
        printf("Creating thread %ld\n", t);
        rc = pthread_create(&threads[t], NULL, thread_function, (void *)t);
        if (rc) {
            printf("ERROR; return code from pthread_create() is %d\n", rc);
            exit(-1);
        }
    }
    
    for (t = 0; t < NUM_THREADS; t++) {
        pthread_join(threads[t], NULL);
    }
    
    pthread_mutex_destroy(&mutex);
    
    printf("Final value of shared variable: %d\n", shared_variable);
    
    return 0;
}
